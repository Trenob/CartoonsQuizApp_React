{"ast":null,"code":"var _jsxFileName = \"/Users/trevon/Desktop/ECPI/CIS453_Lab/cartoonsquizapp 2/CartoonsQuizApp_React/src/ConnectToPublicImages.js\";\nimport React from 'react';\n\n//Images component\n//takes property form (string) to reference a specific image\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Image = ({\n  Network,\n  Show\n}) => {\n  //string to public url + gokusprites folder\n  var publicUrlforImages = process.env.PUBLIC_URL + 'publicImages';\n  var publicUrlforCartoonNetwork = process.env.PUBLIC_URL + 'cartoonnetworkImages';\n  var publicUrlforDisney = process.env.PUBLIC_URL + 'disneyImages';\n  var publicUrlforNickelodeon = process.env.PUBLIC_URL + 'nickelodeonImages';\n\n  //Public Images array\n  const publicImages = [{\n    Network: 'Rules',\n    Show: 'Da_Rules',\n    ImageSource: publicUrlforImages + '/Da_Rules_Stock_Image.webp'\n  }];\n\n  //CartoonNetwork Images array\n  const cartoonNetworkImages = [{\n    Network: 'CartoonNetwork',\n    Show: 'PowerPuffGirls',\n    ImageSource: publicUrlforCartoonNetwork + '/PowerpuffGirls.png'\n  }, {\n    Network: 'CartoonNetwork',\n    Show: 'KND',\n    ImageSource: publicUrlforCartoonNetwork + '/CodenameKidsNextDoor.png'\n  }, {\n    Network: 'CartoonNetwork',\n    Show: 'FostersHome',\n    ImageSource: publicUrlforCartoonNetwork + '/FostersHome.png'\n  }];\n\n  //Diseny Images array\n  const disneyImages = [{\n    Network: 'Disney',\n    Show: 'DannyPhantom',\n    ImageSource: publicUrlforDisney + '/DannyPhantom.png'\n  }, {\n    Network: 'Disney',\n    Show: 'LiloAndStitch',\n    ImageSource: publicUrlforDisney + '/LiloAndStitch.png'\n  }, {\n    Network: 'Disney',\n    Show: 'PhineasAndFerb',\n    ImageSource: publicUrlforDisney + '/PhineasAndFerb.png'\n  }];\n\n  //Nickelodeon Images array\n  const nickelodeonImages = [{\n    Network: 'Nickelodeon',\n    Show: 'FairyOddParents',\n    ImageSource: publicUrlforNickelodeon + '/FairyOddParents.png'\n  }, {\n    Network: 'Nickelodeon',\n    Show: 'JimmyNeutron',\n    ImageSource: publicUrlforNickelodeon + '/JimmyNeutron.png'\n  }, {\n    Network: 'Nickelodeon',\n    Show: 'SpongebobSquarepants',\n    ImageSource: publicUrlforNickelodeon + '/SpongebobSquarepants.png'\n  }];\n  var image = publicImages.find(img => img.Show === Show);\n\n  //decide which network to use for image\n  switch (Network) {\n    case 'Public':\n      image = publicImages.find(img => img.Show === Show);\n      break;\n    case 'CartoonNetwork':\n      image = cartoonNetworkImages.find(img => img.Show === Show);\n      break;\n    case 'Disney':\n      image = disneyImages.find(img => img.Show === Show);\n      break;\n    case 'Nickelodeon':\n      image = nickelodeonImages.find(img => img.Show === Show);\n      break;\n    default:\n    //\n  }\n\n  //Return the image\n  return (\n    /*#__PURE__*/\n    //Div returns an image if the form is found, if not found it returns image not found\n    _jsxDEV(_Fragment, {\n      children: image ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image.ImageSource,\n        alt: Show\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 20\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Image not found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 64\n      }, this)\n    }, void 0, false)\n  );\n};\n_c = Image;\nexport default Image;\nvar _c;\n$RefreshReg$(_c, \"Image\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","Image","Network","Show","publicUrlforImages","process","env","PUBLIC_URL","publicUrlforCartoonNetwork","publicUrlforDisney","publicUrlforNickelodeon","publicImages","ImageSource","cartoonNetworkImages","disneyImages","nickelodeonImages","image","find","img","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/trevon/Desktop/ECPI/CIS453_Lab/cartoonsquizapp 2/CartoonsQuizApp_React/src/ConnectToPublicImages.js"],"sourcesContent":["import React from 'react';\n\n//Images component\n//takes property form (string) to reference a specific image\nconst Image = ({ Network, Show }) => {\n\n    //string to public url + gokusprites folder\n    var publicUrlforImages = process.env.PUBLIC_URL + 'publicImages';\n    var publicUrlforCartoonNetwork = process.env.PUBLIC_URL + 'cartoonnetworkImages';\n    var publicUrlforDisney = process.env.PUBLIC_URL + 'disneyImages';\n    var publicUrlforNickelodeon = process.env.PUBLIC_URL + 'nickelodeonImages';\n\n    //Public Images array\n    const publicImages = [\n        { Network: 'Rules', Show: 'Da_Rules', ImageSource: publicUrlforImages + '/Da_Rules_Stock_Image.webp' }\n    ];\n\n    //CartoonNetwork Images array\n    const cartoonNetworkImages = [\n        {\n            Network: 'CartoonNetwork',\n            Show: 'PowerPuffGirls',\n            ImageSource: publicUrlforCartoonNetwork + '/PowerpuffGirls.png'\n        },\n        {\n            Network: 'CartoonNetwork',\n            Show: 'KND',\n            ImageSource: publicUrlforCartoonNetwork + '/CodenameKidsNextDoor.png'\n        },\n        {\n            Network: 'CartoonNetwork',\n            Show: 'FostersHome',\n            ImageSource: publicUrlforCartoonNetwork + '/FostersHome.png'\n        }\n    ];\n\n    //Diseny Images array\n    const disneyImages = [\n        {\n            Network: 'Disney',\n            Show: 'DannyPhantom',\n            ImageSource: publicUrlforDisney + '/DannyPhantom.png'\n        },\n        {\n            Network: 'Disney',\n            Show: 'LiloAndStitch',\n            ImageSource: publicUrlforDisney + '/LiloAndStitch.png'\n        },\n        {\n            Network: 'Disney',\n            Show: 'PhineasAndFerb',\n            ImageSource: publicUrlforDisney + '/PhineasAndFerb.png'\n        }\n    ];\n\n    //Nickelodeon Images array\n    const nickelodeonImages = [\n        {\n            Network: 'Nickelodeon',\n            Show: 'FairyOddParents',\n            ImageSource: publicUrlforNickelodeon + '/FairyOddParents.png'\n        },\n        {\n            Network: 'Nickelodeon',\n            Show: 'JimmyNeutron',\n            ImageSource: publicUrlforNickelodeon + '/JimmyNeutron.png'\n        },\n        {\n            Network: 'Nickelodeon',\n            Show: 'SpongebobSquarepants',\n            ImageSource: publicUrlforNickelodeon + '/SpongebobSquarepants.png'\n        }\n    ];\n\n    var image = publicImages.find(img => img.Show === Show);\n\n    //decide which network to use for image\n    switch (Network) {\n        case 'Public':\n            image = publicImages.find(img => img.Show === Show);\n            break;\n        case 'CartoonNetwork':\n            image = cartoonNetworkImages.find(img => img.Show === Show);\n            break;\n        case 'Disney':\n            image = disneyImages.find(img => img.Show === Show);\n            break;\n        case 'Nickelodeon':\n            image = nickelodeonImages.find(img => img.Show === Show);\n            break;\n        default:\n        //\n    }\n\n    //Return the image\n    return (\n        //Div returns an image if the form is found, if not found it returns image not found\n        <>{image ? <img src={image.ImageSource} alt={Show}/> : <p>Image not found</p>}</>\n    );\n};\n\nexport default Image;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}