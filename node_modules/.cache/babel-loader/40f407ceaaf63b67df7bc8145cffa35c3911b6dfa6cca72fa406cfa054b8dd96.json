{"ast":null,"code":"import React from'react';//Images component\n//takes property form (string) to reference a specific image\nimport{jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const Image=_ref=>{let{Network,Show}=_ref;//string to public url + gokusprites folder\nvar publicUrlforImages=process.env.PUBLIC_URL+'publicImages';var publicUrlforCartoonNetwork=process.env.PUBLIC_URL+'cartoonnetworkImages';var publicUrlforDisney=process.env.PUBLIC_URL+'disneyImages';var publicUrlforNickelodeon=process.env.PUBLIC_URL+'nickelodeonImages';//Public Images array\nconst publicImages=[{Network:'Rules',Show:'Da_Rules',ImageSource:publicUrlforImages+'/Da_Rules_Stock_Image.webp'}];//CartoonNetwork Images array\nconst cartoonNetworkImages=[{Network:'CartoonNetwork',Show:'PowerPuffGirls',ImageSource:publicUrlforCartoonNetwork+'/PowerpuffGirls.png'},{Network:'CartoonNetwork',Show:'KND',ImageSource:publicUrlforCartoonNetwork+'/CodenameKidsNextDoor.png'},{Network:'CartoonNetwork',Show:'FostersHome',ImageSource:publicUrlforCartoonNetwork+'/FostersHome.png'}];//Diseny Images array\nconst disneyImages=[{Network:'Disney',Show:'DannyPhantom',ImageSource:publicUrlforDisney+'/DannyPhantom.png'},{Network:'Disney',Show:'LiloAndStitch',ImageSource:publicUrlforDisney+'/LiloAndStitch.png'},{Network:'Disney',Show:'PhineasAndFerb',ImageSource:publicUrlforDisney+'/PhineasAndFerb.png'}];//Nickelodeon Images array\nconst nickelodeonImages=[{Network:'Nickelodeon',Show:'FairyOddParents',ImageSource:publicUrlforNickelodeon+'/FairyOddParents.png'},{Network:'Nickelodeon',Show:'JimmyNeutron',ImageSource:publicUrlforNickelodeon+'/JimmyNeutron.png'},{Network:'Nickelodeon',Show:'SpongebobSquarepants',ImageSource:publicUrlforNickelodeon+'/SpongebobSquarepants.png'}];var image=publicImages.find(img=>img.Show===Show);//decide which network to use for image\nswitch(Network){case'Public':image=publicImages.find(img=>img.Show===Show);break;case'CartoonNetwork':image=cartoonNetworkImages.find(img=>img.Show===Show);break;case'Disney':image=disneyImages.find(img=>img.Show===Show);break;case'Nickelodeon':image=nickelodeonImages.find(img=>img.Show===Show);break;default://\n}//Return the image\nreturn/*#__PURE__*/ (//Div returns an image if the form is found, if not found it returns image not found\n_jsx(_Fragment,{children:image?/*#__PURE__*/_jsx(\"img\",{src:image.ImageSource,alt:Show}):/*#__PURE__*/_jsx(\"p\",{children:\"Image not found\"})}));};export default Image;","map":{"version":3,"names":["React","jsx","_jsx","Fragment","_Fragment","Image","_ref","Network","Show","publicUrlforImages","process","env","PUBLIC_URL","publicUrlforCartoonNetwork","publicUrlforDisney","publicUrlforNickelodeon","publicImages","ImageSource","cartoonNetworkImages","disneyImages","nickelodeonImages","image","find","img","children","src","alt"],"sources":["/Users/trevon/Desktop/ECPI/CIS453_Lab/cartoonsquizapp 2/CartoonsQuizApp_React/src/ConnectToPublicImages.js"],"sourcesContent":["import React from 'react';\n\n//Images component\n//takes property form (string) to reference a specific image\nconst Image = ({ Network, Show }) => {\n\n    //string to public url + gokusprites folder\n    var publicUrlforImages = process.env.PUBLIC_URL + 'publicImages';\n    var publicUrlforCartoonNetwork = process.env.PUBLIC_URL + 'cartoonnetworkImages';\n    var publicUrlforDisney = process.env.PUBLIC_URL + 'disneyImages';\n    var publicUrlforNickelodeon = process.env.PUBLIC_URL + 'nickelodeonImages';\n\n    //Public Images array\n    const publicImages = [\n        { Network: 'Rules', Show: 'Da_Rules', ImageSource: publicUrlforImages + '/Da_Rules_Stock_Image.webp' }\n    ];\n\n    //CartoonNetwork Images array\n    const cartoonNetworkImages = [\n        {\n            Network: 'CartoonNetwork',\n            Show: 'PowerPuffGirls',\n            ImageSource: publicUrlforCartoonNetwork + '/PowerpuffGirls.png'\n        },\n        {\n            Network: 'CartoonNetwork',\n            Show: 'KND',\n            ImageSource: publicUrlforCartoonNetwork + '/CodenameKidsNextDoor.png'\n        },\n        {\n            Network: 'CartoonNetwork',\n            Show: 'FostersHome',\n            ImageSource: publicUrlforCartoonNetwork + '/FostersHome.png'\n        }\n    ];\n\n    //Diseny Images array\n    const disneyImages = [\n        {\n            Network: 'Disney',\n            Show: 'DannyPhantom',\n            ImageSource: publicUrlforDisney + '/DannyPhantom.png'\n        },\n        {\n            Network: 'Disney',\n            Show: 'LiloAndStitch',\n            ImageSource: publicUrlforDisney + '/LiloAndStitch.png'\n        },\n        {\n            Network: 'Disney',\n            Show: 'PhineasAndFerb',\n            ImageSource: publicUrlforDisney + '/PhineasAndFerb.png'\n        }\n    ];\n\n    //Nickelodeon Images array\n    const nickelodeonImages = [\n        {\n            Network: 'Nickelodeon',\n            Show: 'FairyOddParents',\n            ImageSource: publicUrlforNickelodeon + '/FairyOddParents.png'\n        },\n        {\n            Network: 'Nickelodeon',\n            Show: 'JimmyNeutron',\n            ImageSource: publicUrlforNickelodeon + '/JimmyNeutron.png'\n        },\n        {\n            Network: 'Nickelodeon',\n            Show: 'SpongebobSquarepants',\n            ImageSource: publicUrlforNickelodeon + '/SpongebobSquarepants.png'\n        }\n    ];\n\n    var image = publicImages.find(img => img.Show === Show);\n\n    //decide which network to use for image\n    switch (Network) {\n        case 'Public':\n            image = publicImages.find(img => img.Show === Show);\n            break;\n        case 'CartoonNetwork':\n            image = cartoonNetworkImages.find(img => img.Show === Show);\n            break;\n        case 'Disney':\n            image = disneyImages.find(img => img.Show === Show);\n            break;\n        case 'Nickelodeon':\n            image = nickelodeonImages.find(img => img.Show === Show);\n            break;\n        default:\n        //\n    }\n\n    //Return the image\n    return (\n        //Div returns an image if the form is found, if not found it returns image not found\n        <>{image ? <img src={image.ImageSource} alt={Show}/> : <p>Image not found</p>}</>\n    );\n};\n\nexport default Image;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}